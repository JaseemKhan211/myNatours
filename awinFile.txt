// BUILD QUERY
        // // 1A) FILTERING
        // const queryObj = {...req.query};
        // const excludedFields = ['page', 'sort', 'limit', 'fields'];
        // excludedFields.forEach(el => delete queryObj[el]);
        
        // // 2B) ADVANCE FILTERING
        // let qtyStr = JSON.stringify(queryObj);
        // qtyStr = qtyStr.replace(/\b(gte|gt|lte|lt)\b/g, match => `$${match}`)
        // console.log(JSON.parse(qtyStr));
        
        // // {difficulty: 'easy', duration: {$gte = 5}}
        // // {difficulty: 'easy', duration: {gte = '5'}}

        // let query = Tour.find(JSON.parse(qtyStr));

        // 2) SORTING
        // if(req.query.sort){
        //     const sortBy = req.query.sort.split(',').join(' ');
        //     console.log(sortBy);
        //     query = query.sort(sortBy);
        // }else {
        //     query = query.sort('-createAt');
        // }

        // 3) Limiting Fields
        // if(req.query.fields){
        //     const fields = req.query.fields.split(',').join(' ');
        //     query = query.select(fields);
        // }else {
        //     query = query.select('-__v');
        // }

        // 4) Pagination
        // const page = req.query.page * 1 || 1; // NICEELY TRICK CONVERT THE STRING INTO NUMBER 
        // const limit = req.query.limit * 1 || 100;
        // const skip = (page - 1) * limit;
        // query = query.skip(skip).limit(limit); 
        
        // if(req.query.page){
        //     const nameTours = await Tour.countDocuments();
        //     if(skip > nameTours) throw new Error('This page is does not exist');
        // }
        // IT'S VERY SIMPLE METHOD FILTER THE RECORDS
        //const tours = await Tour.find(req.query);
        
        // FIXME: SIMPLE METHOD NODE JS FILTER THE ITEM
        // const tours = await Tour.find({
        //     duration: 5,
        //     difficulty: 'easy'
        // });
          
        // TODO: ANOTHER METHOD OF MONGOES METHODS 
        // const tours = await Tour.find()
        // .where('duration').equals(5)
        // .where('difficulty').equals('easy');




-----------------


class ApiFeatures {
    constructor(query, queryString ){
        this.query = query;
        this.queryString = queryString;
    }

    filer() {
        const queryObj = {...this.queryString};
        const excludedFields = ['page', 'sort', 'limit', 'fields'];
        excludedFields.forEach(el => delete queryObj[el]);
        
        // 2B) ADVANCE FILTERING
        let qtyStr = JSON.stringify(queryObj);
        qtyStr = qtyStr.replace(/\b(gte|gt|lte|lt)\b/g, match => `$${match}`)
        console.log(JSON.parse(qtyStr));

        this.query = this.query.find(JSON.parse(qtyStr));

        return this;
    }

    sort() {
        if(this.queryString.sort){
            const sortBy = this.queryString.sort.split(',').join(' ');
            this.query = this.query.sort(sortBy);
        }else {
            this.query = this.query.sort('-createAt');
        }

        return this;
    }

    limitFields() {
        if(this.queryString.fields){
            const fields = this.queryString.fields.split(',').join(' ');
            this.query = this.query.select(fields);
        }else {
            this.query = this.query.select('-__v');
        }

        return this;
    }

    paginate() {
        const page = this.queryString.page * 1 || 1; // NICEELY TRICK CONVERT THE STRING INTO NUMBER 
        const limit = this.queryString.limit * 1 || 100;
        const skip = (page - 1) * limit;
        this.query = this.query.skip(skip).limit(limit); 
        
        return this;
    }
}